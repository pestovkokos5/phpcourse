<?php 

/*
Задание 1: Задания с массивами
1a. Создайте массив $arr=['a', 'b', 'c']. Выведите значение массива на экран с помощью функции var_dump().
*/

<?php
  $arr=['a', 'b', 'c'];
  var_dump($arr);
?>

/*
1b. Выведите на экран содержимое первого, второго и третьего элементов массива $arr из предыдущего пункта.
*/

<?php
  $arr=['a', 'b', 'c'];
  print('Первый элемент массива '.$arr[0].'<br />');
  print('Второй элемент массива '.$arr[1].'<br />');
  print('Третий элемент массива '.$arr[2].'<br />');
?>

/*
1c. Создайте массив $arr=['a', 'b', 'c', 'd'] и с его помощью выведите на экран строку 'a+b, c+d'.
*/

<?php
  $arr=['a', 'b', 'c', 'd'];
  print($arr[0].'+'.$arr[1].'<br />');
  print($arr[2].'+'.$arr[3].'<br />');
?>

/*
1d. Создайте массив $arr с элементами 2, 5, 3, 9. 
Умножьте первый элемент массива на второй, а третий элемент на четвертый. 
Результаты сложите, присвойте переменной $result. 
Выведите на экран значение этой переменной.
*/

<?php
  $arr=[2, 5, 3, 9];
  $result=$arr[0]*$arr[1]+$arr[2]*$arr[3];
  print($result);
?>

/*
1e. Заполните массив $arr числами от 1 до 5. Не объявляйте массив, а просто заполните его присваиванием $arr[] = новое значение.
*/

<?php
  for ($i=1;$i<6;$i++) {
    $arr[]=$i;
  }
?>

/*
1f. Создайте массив $arr. Выведите на экран элемент с ключом 'c'. $arr = ['a'=>1, 'b'=>2, 'c'=>3];
*/

<?php
$arr = ['a'=>1, 'b'=>2, 'c'=>3];
print($arr['c']);
?>

/*
1g. Создайте массив $arr. Найдите сумму элементов этого массива. $arr = ['a'=>1, 'b'=>2, 'c'=>3];
*/

<?php
$arr = ['a'=>1, 'b'=>2, 'c'=>3];
foreach ($arr as $value) {
  $summ=$summ+$value;
}
print($summ);
?>

/*
1h. Создайте массив заработных плат $arr. Выведите на экран зарплату Пети и Коли. 
$arr = ['Коля'=>'1000$', 'Вася'=>'500$', 'Петя'=>'200$'];
*/

<?php
$arr = ['Коля'=>'1000$', 'Вася'=>'500$', 'Петя'=>'200$'];
print('Коля '.$arr['Коля'].'<br />');
print('Петя '.$arr['Петя'].'<br />');
?>

/*
1i. Создайте ассоциативный массив дней недели. 
Ключами в нем должны служить номера дней от начала недели (понедельник - должен иметь ключ 1, вторник - 2 и т.д.). 
Выведите на экран текущий день недели.
*/

<?php
$arr = [
  1 =>'Понедельник',
  2 =>'Вторник',
  3 =>'Среда',
  4 =>'Четверг',
  5 =>'Пятница',
  6 =>'Суббота',
  7 =>'Воскресенье'
];
print($arr[6]);
?>

/*
1j. Пусть теперь номер дня недели хранится в переменной $day, например там лежит число 3. 
Выведите день недели, соответствующий значению переменной $day.
*/

<?php
$day = 3;
$arr = [
  1 =>'Понедельник',
  2 =>'Вторник',
  3 =>'Среда',
  4 =>'Четверг',
  5 =>'Пятница',
  6 =>'Суббота',
  7 =>'Воскресенье'
];
print($arr[$day]);
?>

/*
1k. Создайте многомерный массив $arr. С его помощью выведите на экран слова 'joomla', 'drupal', 'зеленый', 'красный'.
$arr = [
	'cms'=>['joomla', 'wordpress', 'drupal'],
	'colors'=>['blue'=>'голубой', 'red'=>'красный', 'green'=>'зеленый']
];
*/

<?php
$arr = [
	'cms'=>['joomla', 'wordpress', 'drupal'],
	'colors'=>['blue'=>'голубой', 'red'=>'красный', 'green'=>'зеленый']
];
print($arr['cms'][0].', '.$arr['cms'][2].', '.$arr['colors']['green'].', '.$arr['colors']['red']);
?>

/*
1l. Создайте двумерный массив. 
Первые два ключа - это 'ru' и 'en'. 
Пусть первый ключ содержит элемент, являющийся массивом названий дней недели по-русски, а второй - по-английски. 
Выведите с помощью этого массива понедельник по-русски и среду по английски (пусть понедельник - это первый день).
*/

<?php
$arr = [
	'ru'=>[1=>'Понедельник', 2=>'Вторник', 3=>'Среда', 4=>'Четверг', 5=>'Пятница', 6=>'Суббота', 7=>'Воскресенье'],
	'en'=>[1=>'Monday', 2=>'Tuesday', 3=>'Wensday', 4=>'Chetverg', 5=>'Friday', 6=>'Saturday', 7=>'Sunday']
];
print($arr['ru'][1].', '.$arr['en'][3]);
?>

/*
1m. Пусть теперь в переменной $lang хранится язык (она принимает одно из значений или 'ru', или 'en' - либо то, либо то), а в переменной $day - номер дня. 
Выведите словом день недели, соответствующий переменным $lang и $day. То есть: если, к примеру, $lang = 'ru' и $day = 3 - то выведем 'среда'.
*/

<?php
$lang="ru";
$day=3;
$arr = [
	'ru'=>[1=>'Понедельник', 2=>'Вторник', 3=>'Среда', 4=>'Четверг', 5=>'Пятница', 6=>'Суббота', 7=>'Воскресенье'],
	'en'=>[1=>'Monday', 2=>'Tuesday', 3=>'Wensday', 4=>'Chetverg', 5=>'Friday', 6=>'Saturday', 7=>'Sunday']
];
print($arr[$lang][$day]);
?>

/*
1n. Используя массивы и пользовательские функции переделать задачи 5.b и 5.c из первого занятия. 
Учитывая что длина пароля может быть любая, например 100 цифр. 
Использовать рекурсивный вызов функции.
*/
/* 5b */

<?php
function vzlom(&$password_vzlom) {
  $password_vzlom=$password_vzlom + 1;
}
$password="00102132900";
$password_vzlom=0;
while ($password_vzlom!=$password) {
	vzlom($password_vzlom);
}
$count=count(str_split($password));
$password_vrem=$password_vzlom;
while ($password_vrem < (10 ** ($count-1))) {
  $password_vrem=$password_vrem."0";
  $password_vzlom="0".$password_vzlom;
}
print('Пароль '.$password_vzlom)
?>

/* 5c из-за того что непонятен алгоритм зашифровки для пароля не из трех символов, сделал разбитие по тройкам
зашифрованного и первого пароля*/

<?php
/*Функции*/
function kraya ($a, $b, $c) {
  $kray=$c.$b.$a;
  return $kray;
}
function ne_kraya ($a, $b, $c) {
  $kray=$b.$a.$c;
  return $kray;
}
/*Пароль и защшифрованный пароль Важно(их длину задавать одинаковой т.к по задаче 5.с из 1 го они оба трехзначны)*/
$pass1="123213163";
$pass2Se=123456789;
/*Первый паролль переводим в массив*/
$massiv1=str_split($pass1);
$count1=count($massiv1);

/*Второй паролль переводим в массив*/
$massiv2Se=str_split($pass2Se);
$count2Se=count($massiv2Se);
/*Зададим остаток*/
$ostatok="";
/*Цикл для каждой тройки чисел из массива 1*/
for ($i=0; $i<$count1+3; $i+=3) {
  /*Если в первом массиве второе число больше 5 то меняем местами крайние значения в зашифрованном пароле*/
  if (isset($massiv1[$i+2]) and $massiv1[$i+1]>5) {
    $part_pass[]=kraya($massiv2Se[$i], $massiv2Se[$i+1], $massiv2Se[$i+2]);
    /*Если в первом массиве второе число меньше или равно 5 то меняем местами левое и правое*/
  } elseif (isset($massiv1[$i+2]) and $massiv1[$i+1]<=5) {
    $part_pass[]=ne_kraya($massiv2Se[$i], $massiv2Se[$i+1], $massiv2Se[$i+2]);
    /*Остаток если два элемента*/
  } elseif (isset($massiv1[$i+1])) {
    $ostatok=$massiv2Se[$i].$massiv2Se[$i+1];
    /*Остаток если один элемент*/
  } elseif (isset($massiv1[$i])) {
    $ostatok=$massiv2Se[$i];
  }
}
/*Перводим в массив*/
$pass2=implode("", $part_pass);
/*Остаток если есть приписываем слева*/
print($pass2.$ostatok);
?>


/*
Задание 2: Задания с функциями:
2a. Воспроизвести весь код из ролика Изучение PHP для начинающих | Урок #14 - Функции и написать пояснения к каждой строчке кода.
*/

<?php
function printWords ($word,$x,$y){ // cоздали функцию с тремя параметрами
  $word = math ($x , $y); //вызываем функцию math, передавая в качестве аргументов $x и $y
  echo $word; //вывести $word, являющуюся результатом выполнения функции math
}

function math($first,$second){ //создали функцию math с двумя параметрами
  $summa = $first + $second; //склдываем 2 параметра между собой
  return $summa; //возвращаем сумму
}

$x = 12; //Присваиваем переменной x значение 12
$y = 35; //Присваиваем переменной y значение 35

printWords ($sum, $x, $y); //вызываем функцию math передавая 3 аргумента
?>

/*
2b. Есть двумерный массив в котором хранятся числа. 
Каждая строка это вложения/съем в банк сумм денег одним человеком (если съем, то число отрицательное), каждый взнос/съем хранится в отдельной ячейке. 
Посчитать сумму денег которая есть у каждого человека и вывести на экран список сумм отсортировав его от большей суммы к меньшей. 
Значения для демонстрации расчетов задать самостоятельно.
*/

<?php
function shet ($item, $key) {
  foreach ($item as $chislo) {
    $summ=$summ+$chislo;
  }
  $client=[$summ, $key];
  return($client);
};

$arr = [
	'1'=>[300, 400, -400, 200, 100, 900, -600],
	'2'=>[300, -200, 200, 1300, -600, 100, 100],
  '3'=>[900, 300, 800, -100, 100, 900, -500],
  '4'=>[100, 400, 300, 100, 100, -500, 100],
  '5'=>[100, 400, 200, 300, -100, 100, -400],
  '6'=>[5000, 200, -500, 900, 300, -500, -500],
  '7'=>[100, 100, 700, 900, -100, 300, 300]
];
foreach ($arr as $key=>$value) {
  $common[]=shet($value, $key);
}
arsort($common);
foreach ($common as $value) {
  print('У клиента '.$value[1]. ' сумма '.$value[0].'<br \>');
}
?>

/*
2c. Написать функцию которая выводит на экран простые числа (в математике числа называются простыми которые целочисленно делятся только на себя и на единицу) в заданном диапазоне. 
Диапазон передается в функцию в качестве массива(пример такого диапазона: $range = [1,50]). 
Так же вывести на экран отдельным блоком все составные числа (не простые).
*/

<?php
function searchSimpleNumbers ($range) {
  for ($i=$range[0]; $i<=$range[1]; $i++) {
    $k=0;
    if ($i>0) {
      for ($j=1; $j<=$i; $j++) {
        $ostatok = $i % $j;
        if ($ostatok==0) {
          $k=$k+1;
        }
      }
    } else continue;
    //print('<br />'.$k.'<br />');
    if ($k==2 or $k==1)  {
      $prost[]=$i;
    } else {
      $sost[]=$i;
    }
  }
  if (isset($prost)) {
    print('Простые числа<br />');
    foreach ($prost as $value) {
      print($value.'<br />');
    }
  } else {
    print('В заданном промежутке простых чисел нет<br />');
  }
  if (isset($sost)) {
    print('Составные числа<br />');
    foreach ($sost as $value) {
      print($value.'<br />');
    }
  } else {
    print('В заданном промежутке составных чисел нет');
  }
  };

$range=[1, 50];
print('Промежуток от '.$range[0].' до '.$range[1].'<br/>');
searchSimpleNumbers($range);
?>



/*
Задание 3: Задания на изменение обработки ошибок в php:
3a. Сделать настройки вашего php которые позволят выводить на экран ошибки уровня notice и deprecated.
*/

https://prnt.sc/uxxnsk

/*
3b. Продемонстрировать результат ошибок всех типов ломая свой скрипт (fatal, error, notice и deprecated).
*/

/*fatal*/

https://prnt.sc/uxxsv2
<?php
searchSimpleNumbers($range);
?>

/*parse*/

https://prnt.sc/uxxy7y
<?php
$a=4;
if ($a>2 {
  print($a);
}
?>

/*notice*/

https://prnt.sc/uxxsa8
<?php
$arr=[0, 1];
print($arr[2]);
?>

/*deprecated*/

https://prnt.sc/uxxwlh
<?php
class A {
    function f() { echo get_class($this); }
}

class B {
    function f() { A::f(); }
}

(new B)->f();
?>
